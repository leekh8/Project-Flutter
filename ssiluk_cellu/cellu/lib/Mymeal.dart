import 'package:cellu/MealCreate.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'MealCreate.dart';
void main() {
  runApp(const Mymeal());
}
// FIXME : 클래스명 변경
// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class Mymeal extends StatelessWidget {
  const Mymeal({super.key});

  Future<List<DietPlan>> fetchDietPlans() async {
    final response = await http.get(
      // Uri.parse('http://your-backend-server.com/diet-plans'));
        Uri.parse('http://192.168.20.74:5021/date'));

    if (response.statusCode == 200) {
      String str = response.body.toString();
      debugPrint('debug: $str');


      List jsonResponse = json.decode(response.body);
      List<DietPlan> dietPlans = jsonResponse.map((item) =>
          DietPlan.fromJson(item)).toList();

      // 날짜와 시간 기준으로 정렬합니다. 최신 정보가 앞에 오도록 합니다.
      dietPlans.sort((a, b) {
        DateTime dateTimeA = DateTime.parse(a.date + ' ' + a.time);
        DateTime dateTimeB = DateTime.parse(b.date + ' ' + b.time);
        return dateTimeB.compareTo(dateTimeA);
      });

      // 최신의 3개만 반환합니다.
      return dietPlans.take(3).toList();
    } else {
      throw Exception('Failed to load diet plans from server');
    }
  }


  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        appBar: AppBar(title: Center(
            child: Text('내 식단 작성', style: TextStyle(color: Colors.black),)),
          backgroundColor: Colors.white,),
        body: FutureBuilder<List<DietPlan>>( // FutureBuilder를 사용하여 비동기 작업을 처리
            future: fetchDietPlans(), // 서버에서 식단 계획을 불러오는 함수를 호출
            builder: (context, snapshot) { // 불러온 데이터에 따라 다른 위젯을 반환
              if (snapshot.hasData) { // 데이터가 정상적으로 불러와진 경우
                return Column(
                  children: [
                    Flexible(
                      fit: FlexFit.tight,
                      child: ListView.builder(
                        itemCount: snapshot.data!.length,
                        itemBuilder: (context, index) {
                          return SizedBox(
                            height: 660, // 적절한 크기로 조절
                            child: Page(dietPlan: snapshot.data![index]),
                          );
                        },
                      ),
                    ),
                    Container(
                      width: double.infinity,
                      height: 50,
                      margin: EdgeInsets.all(24),
                      decoration: BoxDecoration(
                          color: Colors.grey,
                          borderRadius: BorderRadius.circular(20)
                      ),
                      child: Builder(
                        builder: (context) =>
                            TextButton(
                              onPressed: () {
                                Navigator.pushReplacement(
                                  context, // FIXME : MealCreate 페이지로 가게
                                  MaterialPageRoute(
                                      builder: (context) => MealCreate()),
                                );
                              },
                              child: Text("식단 추가하기",
                                  style: TextStyle(color: Colors.white)),
                            ),
                      ),
                    ),
                  ],
                );
              } else if (snapshot.hasError) { // 데이터를 불러오는 데 오류가 발생한 경우
                return Text('${snapshot.error}'); // 오류 메시지를 표시
              }
              return const CircularProgressIndicator(); // 데이터를 불러오는 동안 로딩 인디케이터를 표시
            }
        ),
      ),
    );
  }
}


class DietPlan {
  final String dietTime;
  final String dietContent;
  final String dietImg;

  DietPlan({
    required this.dietTime,
    required this.dietContent,
    required this.dietImg,
  });

  // dietTime을 날짜와 시간으로 분리하는 getter 추가
  String get date => dietTime.split(' ')[0]; // dietTime에서 날짜 추출
  String get time => dietTime.split(' ')[1]; // dietTime에서 시간 추출

  factory DietPlan.fromJson(Map<String, dynamic> json) {
    return DietPlan(
      dietTime: json['dietTime'] as String,
      dietContent: json['dietContent'] as String,
      dietImg: json['dietImg'] as String,
    );
  }
}


// TODO : 백엔드 url 적기
Future<String> fetchImageUrl() async {
  final response = await http.get(Uri.parse('http://192.168.20.74:5021/date'));

  if (response.statusCode == 200) {
    String jsonResponse = json.decode(response.body);
    return jsonResponse;  // 이미지 URL을 반환합니다.
  } else {
    throw Exception('Failed to load image url from server');
  }
}



// TODO : 백엔드 url 적기, 임의 데이터로 확인하기위해
Future<List<DietPlan>> fetchDietPlans() async {
  final response = await http.get(
      Uri.parse('http://192.168.20.74:5021/date'));

  if (response.statusCode == 200) {
    List jsonResponse = json.decode(response.body);
    List<DietPlan> dietPlans = jsonResponse.map((item) =>
        DietPlan.fromJson(item)).toList();

    // 날짜와 시간 기준으로 정렬합니다. 최신 정보가 앞에 오도록 합니다.
    dietPlans.sort((a, b) {
      DateTime dateTimeA = DateTime.parse(a.date + ' ' + a.time);
      DateTime dateTimeB = DateTime.parse(b.date + ' ' + b.time);
      return dateTimeB.compareTo(dateTimeA);
    });

    // 최신의 3개만 반환합니다.
    return dietPlans.take(3).toList();
  } else {
    throw Exception('Failed to load diet plans from server');
  }
}


// TODO : 백엔드 url 적기
Future<void> addDietPlan(DietPlan dietPlan) async {
  final response = await http.post(
    Uri.parse('http://192.168.20.74:5021/date'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{
      'date': dietPlan.date,
      'time': dietPlan.time,
      'description': dietPlan.dietContent,
      'imageUrl': dietPlan.dietImg,
    }),
  );

  if (response.statusCode != 200) {
    throw Exception('Failed to add diet plan to server');
  }
}


class Page extends StatelessWidget {
  final Future<List<DietPlan>> dietPlans = fetchDietPlans();

  final DietPlan dietPlan;

  Page({required this.dietPlan});

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<DietPlan>>(
      future: dietPlans,
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (context, index) {
              return Column(
                children: [
                  Container(
                    width: 393,
                    height: 850,
                    clipBehavior: Clip.antiAlias,
                    decoration: BoxDecoration(color: Color(0xFFF9F9F9)),
                    child: Stack(
                      children: [
                        Positioned(
                          left: 46,
                          top: 154,
                          child: Container(
                            width: 302,
                            height: 408.50,
                            decoration: ShapeDecoration(
                              color: Colors.white,
                              shape: RoundedRectangleBorder(
                                side: BorderSide(width: 0.50, color: Color(0xFF868686)),
                                borderRadius: BorderRadius.circular(30),
                              ),
                              shadows: [
                                BoxShadow(
                                  color: Color(0x0C000000),
                                  blurRadius: 64,
                                  offset: Offset(0, 4),
                                  spreadRadius: 0,
                                )
                              ],
                            ),
                          ),
                        ),

                        // ... 이전 코드 생략 ...



                        Positioned(
                          left: 0,
                          top: 114,
                          child: Container(
                            width: 398,
                            decoration: ShapeDecoration(
                              shape: RoundedRectangleBorder(
                                side: BorderSide(
                                  width: 1,
                                  strokeAlign: BorderSide.strokeAlignCenter,
                                  color: Colors.black.withOpacity(0.20000000298023224),
                                ),
                              ),
                            ),
                          ),
                        ),
                        Positioned(
                          left: 148,
                          top: 186,
                          child: SizedBox(
                            width: 114,
                            height: 31,
                            child: Text(
                              snapshot.data![index].date,  // index 번째 식단 계획의 date를 표시합니다.
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                                fontWeight: FontWeight.w500,
                                height: 0.07,
                              ),
                            ),
                          ),
                        ),
                        Positioned(
                          left: 139,
                          top: 201,
                          child: Container(
                            width: 104,
                            decoration: ShapeDecoration(
                              shape: RoundedRectangleBorder(
                                side: BorderSide(
                                  width: 1,
                                  strokeAlign: BorderSide.strokeAlignCenter,
                                ),
                              ),
                            ),
                          ),
                        ),
                        Positioned(
                          left: 115,
                          top: 220.50,  // 위치 조정
                          child: Text(
                            '식사 시간 ',
                            style: TextStyle(
                              color: Colors.black,
                              fontSize: 15,
                              fontFamily: 'Montserrat',
                              fontWeight: FontWeight.w500,
                              height: 0,
                            ),
                          ),
                        ),
                        Positioned(
                          left: 140,
                          top: 222.50,
                          child: SizedBox(
                            width: 164,
                            height: 21,
                            child: Text(
                              snapshot.data![index].time,  // index 번째 식단 계획의 time를 표시합니다.
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 15,
                                fontFamily: 'Montserrat',
                                fontWeight: FontWeight.w500,
                                height: 0,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),

                        Positioned(
                          left: 73,
                          top: 457.50,
                          child: Container(
                            width: 247,
                            height: 81,
                            decoration: ShapeDecoration(
                              color: Colors.white,
                              shape: RoundedRectangleBorder(
                                side: BorderSide(width: 1, color: Color(0x9E3C3C3C)),
                              ),
                            ),
                          ),
                        ),
                        Positioned(
                          left: 80,
                          top: 461,
                          child: SizedBox(
                            width: 234,
                            height: 74,
                            child: Text(
                              snapshot.data![index].dietContent, // index 번째 DietPlan의 description을 표시합니다.
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 10,
                                fontFamily: 'Montserrat',
                                fontWeight: FontWeight.w500,
                                height: 1.7,
                              ),
                            ),
                          ),
                        ),

                        Positioned(
                          left: 73,
                          top: 248.50,
                          child: Container(
                            width: 247,
                            height: 185,
                            decoration: ShapeDecoration(
                              image: DecorationImage(
                                image: NetworkImage(snapshot.data![index].dietImg),  // index 번째 DietPlan의 imageUrl을 사용합니다.
                                // Fixme : 앱을 진짜 실행해야할때 위에 코드를 주식 아래코드를 ON
                                // image: MemoryImage(base64Decode(snapshot.data![index].dietImg)), // Base64 디코딩
                                fit: BoxFit.cover,
                              ),
                              shape: RoundedRectangleBorder(
                                side: BorderSide(width: 1, color: Color(0x9E3C3C3C)),
                              ),
                            ),
                          ),
                        ),

                      ],
                    ),
                  ),
                ],
              );
            },
          );
        } else if (snapshot.hasError) {
          return Text('${snapshot.error}');
        }
        return const CircularProgressIndicator();
      },
    );
  }
}